package docs

import (
	"encoding/json"
	"strings"

	"github.com/gofiber/fiber/v2"
)

// SwaggerDoc represents the main swagger documentation structure
type SwaggerDoc struct {
	OpenAPI    string                 `json:"openapi"`
	Info       Info                   `json:"info"`
	Servers    []Server               `json:"servers"`
	Paths      map[string]PathItem    `json:"paths"`
	Components Components             `json:"components"`
}

type Info struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	Version     string `json:"version"`
}

type Server struct {
	URL         string `json:"url"`
	Description string `json:"description"`
}

type PathItem struct {
	Get    *Operation `json:"get,omitempty"`
	Post   *Operation `json:"post,omitempty"`
	Put    *Operation `json:"put,omitempty"`
	Delete *Operation `json:"delete,omitempty"`
}

type Operation struct {
	Summary     string                 `json:"summary"`
	Description string                 `json:"description"`
	Tags        []string               `json:"tags"`
	Parameters  []Parameter            `json:"parameters,omitempty"`
	RequestBody *RequestBody           `json:"requestBody,omitempty"`
	Responses   map[string]Response    `json:"responses"`
}

type Parameter struct {
	Name        string `json:"name"`
	In          string `json:"in"`
	Description string `json:"description"`
	Required    bool   `json:"required"`
	Schema      Schema `json:"schema"`
}

type RequestBody struct {
	Description string             `json:"description"`
	Content     map[string]Content `json:"content"`
}

type Response struct {
	Description string             `json:"description"`
	Content     map[string]Content `json:"content,omitempty"`
}

type Content struct {
	Schema Schema `json:"schema"`
}

type Schema struct {
	Type       string            `json:"type"`
	Properties map[string]Schema `json:"properties,omitempty"`
}

type Components struct {
	Schemas map[string]Schema `json:"schemas"`
}

// DocGenerator generates API documentation
type DocGenerator struct {
	doc *SwaggerDoc
}

// NewDocGenerator creates a new documentation generator
func NewDocGenerator(title, version string) *DocGenerator {
	return &DocGenerator{
		doc: &SwaggerDoc{
			OpenAPI: "3.0.0",
			Info: Info{
				Title:       title,
				Description: "API documentation generated by Golara framework",
				Version:     version,
			},
			Servers: []Server{
				{URL: "http://localhost:9000", Description: "Development server"},
			},
			Paths:      make(map[string]PathItem),
			Components: Components{Schemas: make(map[string]Schema)},
		},
	}
}

// AddRoute adds a route to the documentation
func (dg *DocGenerator) AddRoute(method, path, summary, description string, tags []string) {
	if dg.doc.Paths[path].Get == nil && dg.doc.Paths[path].Post == nil && 
	   dg.doc.Paths[path].Put == nil && dg.doc.Paths[path].Delete == nil {
		dg.doc.Paths[path] = PathItem{}
	}

	operation := &Operation{
		Summary:     summary,
		Description: description,
		Tags:        tags,
		Responses: map[string]Response{
			"200": {Description: "Success"},
			"400": {Description: "Bad Request"},
			"500": {Description: "Internal Server Error"},
		},
	}

	pathItem := dg.doc.Paths[path]
	switch strings.ToUpper(method) {
	case "GET":
		pathItem.Get = operation
	case "POST":
		pathItem.Post = operation
	case "PUT":
		pathItem.Put = operation
	case "DELETE":
		pathItem.Delete = operation
	}
	dg.doc.Paths[path] = pathItem
}

// GenerateJSON returns the swagger documentation as JSON
func (dg *DocGenerator) GenerateJSON() ([]byte, error) {
	return json.MarshalIndent(dg.doc, "", "  ")
}

// ServeSwaggerUI serves the Swagger UI
func (dg *DocGenerator) ServeSwaggerUI(app *fiber.App) {
	app.Get("/docs", func(c *fiber.Ctx) error {
		html := `<!DOCTYPE html>
<html>
<head>
    <title>API Documentation</title>
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/swagger-ui-dist@3.25.0/swagger-ui.css" />
</head>
<body>
    <div id="swagger-ui"></div>
    <script src="https://unpkg.com/swagger-ui-dist@3.25.0/swagger-ui-bundle.js"></script>
    <script>
        SwaggerUIBundle({
            url: '/docs/swagger.json',
            dom_id: '#swagger-ui',
            presets: [
                SwaggerUIBundle.presets.apis,
                SwaggerUIBundle.presets.standalone
            ]
        });
    </script>
</body>
</html>`
		c.Set("Content-Type", "text/html")
		return c.SendString(html)
	})

	app.Get("/docs/swagger.json", func(c *fiber.Ctx) error {
		json, err := dg.GenerateJSON()
		if err != nil {
			return c.Status(500).JSON(fiber.Map{"error": "Failed to generate documentation"})
		}
		c.Set("Content-Type", "application/json")
		return c.Send(json)
	})
}